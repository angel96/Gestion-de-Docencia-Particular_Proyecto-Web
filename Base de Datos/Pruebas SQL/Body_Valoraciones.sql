create or replace PACKAGE
BODY PRUEBAS_VALORACIONES AS 

PROCEDURE inicializar AS BEGIN
DELETE FROM VALORACIONES;
END inicializar;

PROCEDURE insertar(nombre_prueba VARCHAR2, w_VALORACION NUMBER, w_OID_ASIG NUMBER, w_OID_P NUMBER, w_OID_A NUMBER,salidaEsperada BOOLEAN) AS
salida BOOLEAN:= TRUE;
VALORACION VALORACIONES%ROWTYPE;
w_oid_V NUMBER;
BEGIN
INSERT INTO VALORACIONES VALUES(w_VALORACION, w_OID_ASIG, w_OID_P, w_OID_A,sec_VALORACIONES.nextval);
w_oid_V:= sec_VALORACIONES.currval;
SELECT * INTO VALORACION FROM VALORACIONES WHERE oid_V=w_oid_V;
IF(VALORACION.VALORACION<> w_VALORACION) THEN
salida:= false;
END IF;
COMMIT WORK;

DBMS_OUTPUT.put_line(nombre_prueba || ':' || ASSERT_EQUALS(salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.put_line(nombre_prueba || ':' || ASSERT_EQUALS(false, salidaEsperada));
ROLLBACK;
END insertar;

PROCEDURE actualizar(nombre_prueba VARCHAR2,w_OID_V NUMBER, w_VALORACION NUMBER, salidaEsperada BOOLEAN) AS
salida BOOLEAN := true;
VALORACION VALORACIONES%ROWTYPE;
BEGIN
UPDATE VALORACIONES SET VALORACION=w_VALORACION WHERE OID_V=W_OID_V;
SELECT * INTO VALORACION FROM VALORACIONES WHERE OID_V=W_OID_V;
IF(VALORACION.VALORACION<>w_VALORACION) THEN
salida:=false;
END IF;
COMMIT WORK;
DBMS_OUTPUT.put_line(nombre_prueba || ':' || ASSERT_EQUALS(salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.put_line(nombre_prueba || ':' || ASSERT_EQUALS(false, salidaEsperada));
ROLLBACK;
END actualizar;

PROCEDURE eliminar(nombre_prueba VARCHAR2, w_OID_V NUMBER, salidaEsperada BOOLEAN) AS 
salida BOOLEAN:= TRUE;
n_VALORACIONES INTEGER;
BEGIN

DELETE FROM VALORACIONES where OID_V=W_OID_V;
SELECT COUNT(*) INTO n_VALORACIONES FROM VALORACIONES WHERE oid_V=w_oid_V;
IF(n_VALORACIONES <>0) THEN
salida:=false;
END IF;
COMMIT WORK;
DBMS_OUTPUT.put_line(nombre_prueba || ':' || ASSERT_EQUALS(salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.put_line(nombre_prueba || ':' || ASSERT_EQUALS(false, salidaEsperada));
ROLLBACK;
END eliminar;

END PRUEBAS_VALORACIONES;